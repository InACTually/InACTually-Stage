/*This is an autogenerated Typescript file! Please don't change it!*/
import ProcNodeBase, { PortType, InputPort, OutputPort, RPC, Param } from "../networking/ProcNodeBase";

export class Audio3DProcNode extends ProcNodeBase {
    protected nodeName: string = "Audio3D";

    constructor() { 
        super();
        this.inputs["audio in"] = this.audioInInput = new InputPort("audio in", PortType.PT_AUDIONODE);
		this.inputs["gain"] = this.gainInput = new InputPort("gain", PortType.PT_NUMBER);
		this.inputs["position"] = this.positionInput = new InputPort("position", PortType.PT_VEC3);
		
        this.outputs["audio out"] = this.audioOutOutput = new OutputPort("audio out", PortType.PT_AUDIONODE);
		
        
        this.params["position"] = this.position = new Param("position", {x:0,y:0,z:0});
		this.params["showVisual"] = this.showVisual = new Param("showVisual", false);
		this.params["tovolume"] = this.tovolume = new Param("tovolume", 5.527313362563291e-8);
		this.params["volume"] = this.volume = new Param("volume", 924747825152);
		
        this.createNode();
    }
     
    public audioInInput : InputPort;
	public gainInput : InputPort;
	public positionInput : InputPort;
	
    public audioOutOutput : OutputPort;
	
    
    public position : Param;
	public showVisual : Param;
	public tovolume : Param;
	public volume : Param;
	
}

export class Audio3DPlayerProcNode extends ProcNodeBase {
    protected nodeName: string = "Audio3DPlayer";

    constructor() { 
        super();
        this.inputs["fire"] = this.fireInput = new InputPort("fire", PortType.PT_BOOL);
		this.inputs["gain"] = this.gainInput = new InputPort("gain", PortType.PT_NUMBER);
		this.inputs["position"] = this.positionInput = new InputPort("position", PortType.PT_VEC3);
		this.inputs["speed"] = this.speedInput = new InputPort("speed", PortType.PT_NUMBER);
		
        this.outputs["playing at"] = this.playingAtOutput = new OutputPort("playing at", PortType.PT_NUMBER);
		this.outputs["buffer"] = this.bufferOutput = new OutputPort("buffer", PortType.PT_AUDIO);
		
        this.rpcs["play"] = this.play = new RPC("play");
		this.rpcs["stop"] = this.stop = new RPC("stop");
		
        this.params["fadeInPosition"] = this.fadeInPosition = new Param("fadeInPosition", 0);
		this.params["fadeOutPosition"] = this.fadeOutPosition = new Param("fadeOutPosition", 1);
		this.params["isCollapsed"] = this.isCollapsed = new Param("isCollapsed", false);
		this.params["isPlaying"] = this.isPlaying = new Param("isPlaying", false);
		this.params["length"] = this.length = new Param("length", 0);
		this.params["looping"] = this.looping = new Param("looping", false);
		this.params["path"] = this.path = new Param("path", "");
		this.params["playPosition"] = this.playPosition = new Param("playPosition", 0);
		this.params["showWaveform"] = this.showWaveform = new Param("showWaveform", false);
		this.params["toVolume"] = this.toVolume = new Param("toVolume", 90);
		this.params["volume"] = this.volume = new Param("volume", 90);
		this.params["x"] = this.x = new Param("x", 0);
		this.params["y"] = this.y = new Param("y", 0);
		this.params["z"] = this.z = new Param("z", 0);
		
        this.createNode();
    }
     
    public fireInput : InputPort;
	public gainInput : InputPort;
	public positionInput : InputPort;
	public speedInput : InputPort;
	
    public playingAtOutput : OutputPort;
	public bufferOutput : OutputPort;
	
    public play : RPC;
	public stop : RPC;
	
    public fadeInPosition : Param;
	public fadeOutPosition : Param;
	public isCollapsed : Param;
	public isPlaying : Param;
	public length : Param;
	public looping : Param;
	public path : Param;
	public playPosition : Param;
	public showWaveform : Param;
	public toVolume : Param;
	public volume : Param;
	public x : Param;
	public y : Param;
	public z : Param;
	
}

export class AudioInProcNode extends ProcNodeBase {
    protected nodeName: string = "AudioIn";

    constructor() { 
        super();
        
        this.outputs["audioNode"] = this.audioNodeOutput = new OutputPort("audioNode", PortType.PT_AUDIONODE);
		this.outputs["sharpness"] = this.sharpnessOutput = new OutputPort("sharpness", PortType.PT_NUMBER);
		this.outputs["regularity"] = this.regularityOutput = new OutputPort("regularity", PortType.PT_NUMBER);
		this.outputs["size"] = this.sizeOutput = new OutputPort("size", PortType.PT_NUMBER);
		this.outputs["temperature"] = this.temperatureOutput = new OutputPort("temperature", PortType.PT_NUMBER);
		this.outputs["contrast"] = this.contrastOutput = new OutputPort("contrast", PortType.PT_NUMBER);
		this.outputs["saturation"] = this.saturationOutput = new OutputPort("saturation", PortType.PT_NUMBER);
		
        
        this.params["path"] = this.path = new Param("path", "");
		
        this.createNode();
    }
     
    
    public audioNodeOutput : OutputPort;
	public sharpnessOutput : OutputPort;
	public regularityOutput : OutputPort;
	public sizeOutput : OutputPort;
	public temperatureOutput : OutputPort;
	public contrastOutput : OutputPort;
	public saturationOutput : OutputPort;
	
    
    public path : Param;
	
}

export class AudioPlayerProcNode extends ProcNodeBase {
    protected nodeName: string = "AudioPlayer";

    constructor() { 
        super();
        this.inputs["fire"] = this.fireInput = new InputPort("fire", PortType.PT_BOOL);
		this.inputs["gain"] = this.gainInput = new InputPort("gain", PortType.PT_NUMBER);
		this.inputs["speed"] = this.speedInput = new InputPort("speed", PortType.PT_NUMBER);
		
        this.outputs["audioOut"] = this.audioOutOutput = new OutputPort("audioOut", PortType.PT_AUDIONODE);
		this.outputs["isPlayingOut"] = this.isPlayingOutOutput = new OutputPort("isPlayingOut", PortType.PT_BOOL);
		
        
        this.params["looping"] = this.looping = new Param("looping", false);
		this.params["path"] = this.path = new Param("path", "");
		this.params["playSpeed"] = this.playSpeed = new Param("playSpeed", 1);
		this.params["resuming"] = this.resuming = new Param("resuming", false);
		this.params["startEvent"] = this.startEvent = new Param("startEvent", false);
		this.params["stopEvent"] = this.stopEvent = new Param("stopEvent", false);
		this.params["stretching"] = this.stretching = new Param("stretching", false);
		this.params["tovolume"] = this.tovolume = new Param("tovolume", 90);
		this.params["volume"] = this.volume = new Param("volume", 90);
		
        this.createNode();
    }
     
    public fireInput : InputPort;
	public gainInput : InputPort;
	public speedInput : InputPort;
	
    public audioOutOutput : OutputPort;
	public isPlayingOutOutput : OutputPort;
	
    
    public looping : Param;
	public path : Param;
	public playSpeed : Param;
	public resuming : Param;
	public startEvent : Param;
	public stopEvent : Param;
	public stretching : Param;
	public tovolume : Param;
	public volume : Param;
	
}

export class AudioStretchProcNode extends ProcNodeBase {
    protected nodeName: string = "AudioStretch";

    constructor() { 
        super();
        
        
        
        
        this.createNode();
    }
     
    
    
    
    
}

export class AudioToRmsProcNode extends ProcNodeBase {
    protected nodeName: string = "AudioToRms";

    constructor() { 
        super();
        this.inputs["audioIn"] = this.audioInInput = new InputPort("audioIn", PortType.PT_AUDIONODE);
		
        this.outputs["rmsOut"] = this.rmsOutOutput = new OutputPort("rmsOut", PortType.PT_NUMBER);
		
        
        
        this.createNode();
    }
     
    public audioInInput : InputPort;
	
    public rmsOutOutput : OutputPort;
	
    
    
}

export class AudioToSpectrumProcNode extends ProcNodeBase {
    protected nodeName: string = "AudioToSpectrum";

    constructor() { 
        super();
        this.inputs["audioIn"] = this.audioInInput = new InputPort("audioIn", PortType.PT_AUDIONODE);
		
        this.outputs["spectrumOut"] = this.spectrumOutOutput = new OutputPort("spectrumOut", PortType.PT_NUMBERLIST);
		
        
        
        this.createNode();
    }
     
    public audioInInput : InputPort;
	
    public spectrumOutOutput : OutputPort;
	
    
    
}

export class BackgroundSubstractionProcNode extends ProcNodeBase {
    protected nodeName: string = "BackgroundSubstraction";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        this.outputs["foreground mask"] = this.foregroundMaskOutput = new OutputPort("foreground mask", PortType.PT_IMAGE);
		this.outputs["foreground cutout"] = this.foregroundCutoutOutput = new OutputPort("foreground cutout", PortType.PT_IMAGE);
		this.outputs["background cutout"] = this.backgroundCutoutOutput = new OutputPort("background cutout", PortType.PT_IMAGE);
		
        
        this.params["detectShadows"] = this.detectShadows = new Param("detectShadows", false);
		this.params["historyLength"] = this.historyLength = new Param("historyLength", 500);
		this.params["threshold"] = this.threshold = new Param("threshold", 16);
		
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    public foregroundMaskOutput : OutputPort;
	public foregroundCutoutOutput : OutputPort;
	public backgroundCutoutOutput : OutputPort;
	
    
    public detectShadows : Param;
	public historyLength : Param;
	public threshold : Param;
	
}

export class BeatDetectorProcNode extends ProcNodeBase {
    protected nodeName: string = "BeatDetector";

    constructor() { 
        super();
        this.inputs["spectrumIn"] = this.spectrumInInput = new InputPort("spectrumIn", PortType.PT_NUMBERLIST);
		this.inputs["rmsIn"] = this.rmsInInput = new InputPort("rmsIn", PortType.PT_NUMBER);
		
        this.outputs["beatTriggerOut"] = this.beatTriggerOutOutput = new OutputPort("beatTriggerOut", PortType.PT_BOOL);
		
        
        
        this.createNode();
    }
     
    public spectrumInInput : InputPort;
	public rmsInInput : InputPort;
	
    public beatTriggerOutOutput : OutputPort;
	
    
    
}

export class BlobDetectionProcNode extends ProcNodeBase {
    protected nodeName: string = "BlobDetection";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        this.outputs["foreground mask"] = this.foregroundMaskOutput = new OutputPort("foreground mask", PortType.PT_IMAGE);
		this.outputs["foreground cutout"] = this.foregroundCutoutOutput = new OutputPort("foreground cutout", PortType.PT_IMAGE);
		this.outputs["background cutout"] = this.backgroundCutoutOutput = new OutputPort("background cutout", PortType.PT_IMAGE);
		
        
        this.params["detectShadows"] = this.detectShadows = new Param("detectShadows", false);
		this.params["historyLength"] = this.historyLength = new Param("historyLength", 500);
		this.params["threshold"] = this.threshold = new Param("threshold", 16);
		
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    public foregroundMaskOutput : OutputPort;
	public foregroundCutoutOutput : OutputPort;
	public backgroundCutoutOutput : OutputPort;
	
    
    public detectShadows : Param;
	public historyLength : Param;
	public threshold : Param;
	
}

export class BodiesFilterProcNode extends ProcNodeBase {
    protected nodeName: string = "BodiesFilter";

    constructor() { 
        super();
        this.inputs["Bodies"] = this.BodiesInput = new InputPort("Bodies", PortType.PT_BODYLIST);
		
        this.outputs["filtered Body"] = this.filteredBodyOutput = new OutputPort("filtered Body", PortType.PT_BODY);
		
        
        this.params["nearestToPosition"] = this.nearestToPosition = new Param("nearestToPosition", {x:0,y:0,z:0});
		this.params["nearestToPositionThreshold"] = this.nearestToPositionThreshold = new Param("nearestToPositionThreshold", 1000);
		this.params["selectedBody"] = this.selectedBody = new Param("selectedBody", 0);
		
        this.createNode();
    }
     
    public BodiesInput : InputPort;
	
    public filteredBodyOutput : OutputPort;
	
    
    public nearestToPosition : Param;
	public nearestToPositionThreshold : Param;
	public selectedBody : Param;
	
}

export class BodyTrackingProcNode extends ProcNodeBase {
    protected nodeName: string = "BodyTracking";

    constructor() { 
        super();
        
        this.outputs["bodies"] = this.bodiesOutput = new OutputPort("bodies", PortType.PT_BODYLIST);
		
        
        
        this.createNode();
    }
     
    
    public bodiesOutput : OutputPort;
	
    
    
}

export class BoneVectorProcNode extends ProcNodeBase {
    protected nodeName: string = "BoneVector";

    constructor() { 
        super();
        this.inputs["Skeleton"] = this.SkeletonInput = new InputPort("Skeleton", PortType.PT_BODY);
		
        this.outputs["Position"] = this.PositionOutput = new OutputPort("Position", PortType.PT_VEC3);
		
        
        this.params["doNormalize"] = this.doNormalize = new Param("doNormalize", false);
		this.params["fromJoint"] = this.fromJoint = new Param("fromJoint", 13);
		this.params["toJoint"] = this.toJoint = new Param("toJoint", 15);
		
        this.createNode();
    }
     
    public SkeletonInput : InputPort;
	
    public PositionOutput : OutputPort;
	
    
    public doNormalize : Param;
	public fromJoint : Param;
	public toJoint : Param;
	
}

export class BoolToFloatProcNode extends ProcNodeBase {
    protected nodeName: string = "BoolToFloat";

    constructor() { 
        super();
        this.inputs["bool"] = this.boolInput = new InputPort("bool", PortType.PT_BOOL);
		
        this.outputs["float"] = this.floatOutput = new OutputPort("float", PortType.PT_NUMBER);
		
        
        this.params["beatInfluence"] = this.beatInfluence = new Param("beatInfluence", 0);
		
        this.createNode();
    }
     
    public boolInput : InputPort;
	
    public floatOutput : OutputPort;
	
    
    public beatInfluence : Param;
	
}

export class CameraDeviceProcNode extends ProcNodeBase {
    protected nodeName: string = "CameraDevice";

    constructor() { 
        super();
        
        this.outputs["cameraImage"] = this.cameraImageOutput = new OutputPort("cameraImage", PortType.PT_IMAGE);
		
        
        this.params["selectedDevice"] = this.selectedDevice = new Param("selectedDevice", "");
		this.params["show"] = this.show = new Param("show", false);
		
        this.createNode();
    }
     
    
    public cameraImageOutput : OutputPort;
	
    
    public selectedDevice : Param;
	public show : Param;
	
}

export class CircleMovementProcNode extends ProcNodeBase {
    protected nodeName: string = "CircleMovement";

    constructor() { 
        super();
        
        this.outputs["position"] = this.positionOutput = new OutputPort("position", PortType.PT_VEC3);
		
        
        this.params["radius"] = this.radius = new Param("radius", 1);
		this.params["speed"] = this.speed = new Param("speed", 0.10000000149011612);
		this.params["x"] = this.x = new Param("x", 0);
		this.params["y"] = this.y = new Param("y", 0);
		this.params["z"] = this.z = new Param("z", 0);
		
        this.createNode();
    }
     
    
    public positionOutput : OutputPort;
	
    
    public radius : Param;
	public speed : Param;
	public x : Param;
	public y : Param;
	public z : Param;
	
}

export class ColorProcNode extends ProcNodeBase {
    protected nodeName: string = "Color";

    constructor() { 
        super();
        this.inputs["trigger"] = this.triggerInput = new InputPort("trigger", PortType.PT_BOOL);
		
        this.outputs["color"] = this.colorOutput = new OutputPort("color", PortType.PT_COLOR);
		
        
        this.params["b"] = this.b = new Param("b", 0);
		this.params["g"] = this.g = new Param("g", 0);
		this.params["r"] = this.r = new Param("r", 0);
		
        this.createNode();
    }
     
    public triggerInput : InputPort;
	
    public colorOutput : OutputPort;
	
    
    public b : Param;
	public g : Param;
	public r : Param;
	
}

export class ColorControlProcNode extends ProcNodeBase {
    protected nodeName: string = "ColorControl";

    constructor() { 
        super();
        this.inputs["hue#1"] = this.hue1Input = new InputPort("hue#1", PortType.PT_NUMBER);
		this.inputs["hue#2"] = this.hue2Input = new InputPort("hue#2", PortType.PT_NUMBER);
		this.inputs["hue#3"] = this.hue3Input = new InputPort("hue#3", PortType.PT_NUMBER);
		this.inputs["hue#4"] = this.hue4Input = new InputPort("hue#4", PortType.PT_NUMBER);
		this.inputs["saturation"] = this.saturationInput = new InputPort("saturation", PortType.PT_NUMBER);
		this.inputs["value"] = this.valueInput = new InputPort("value", PortType.PT_NUMBER);
		this.inputs["colorArrIn"] = this.colorArrInInput = new InputPort("colorArrIn", PortType.PT_NUMBER);
		
        this.outputs["color"] = this.colorOutput = new OutputPort("color", PortType.PT_COLORLIST);
		
        
        this.params["dim"] = this.dim = new Param("dim", 0);
		
        this.createNode();
    }
     
    public hue1Input : InputPort;
	public hue2Input : InputPort;
	public hue3Input : InputPort;
	public hue4Input : InputPort;
	public saturationInput : InputPort;
	public valueInput : InputPort;
	public colorArrInInput : InputPort;
	
    public colorOutput : OutputPort;
	
    
    public dim : Param;
	
}

export class ColorMappingProcNode extends ProcNodeBase {
    protected nodeName: string = "ColorMapping";

    constructor() { 
        super();
        this.inputs["hue"] = this.hueInput = new InputPort("hue", PortType.PT_NUMBER);
		this.inputs["saturation"] = this.saturationInput = new InputPort("saturation", PortType.PT_NUMBER);
		this.inputs["lightness"] = this.lightnessInput = new InputPort("lightness", PortType.PT_NUMBER);
		
        this.outputs["color"] = this.colorOutput = new OutputPort("color", PortType.PT_COLOR);
		
        
        
        this.createNode();
    }
     
    public hueInput : InputPort;
	public saturationInput : InputPort;
	public lightnessInput : InputPort;
	
    public colorOutput : OutputPort;
	
    
    
}

export class ColoredBodiesProcNode extends ProcNodeBase {
    protected nodeName: string = "ColoredBodies";

    constructor() { 
        super();
        this.inputs["Body Index Map"] = this.BodyIndexMapInput = new InputPort("Body Index Map", PortType.PT_IMAGE);
		this.inputs["Background Color"] = this.BackgroundColorInput = new InputPort("Background Color", PortType.PT_COLOR);
		this.inputs["Body Color"] = this.BodyColorInput = new InputPort("Body Color", PortType.PT_COLOR);
		
        this.outputs["Colored Body Index Map"] = this.ColoredBodyIndexMapOutput = new OutputPort("Colored Body Index Map", PortType.PT_IMAGE);
		
        
        
        this.createNode();
    }
     
    public BodyIndexMapInput : InputPort;
	public BackgroundColorInput : InputPort;
	public BodyColorInput : InputPort;
	
    public ColoredBodyIndexMapOutput : OutputPort;
	
    
    
}

export class CoordinatesToOctantProcNode extends ProcNodeBase {
    protected nodeName: string = "CoordinatesToOctant";

    constructor() { 
        super();
        this.inputs["x"] = this.xInput = new InputPort("x", PortType.PT_NUMBER);
		this.inputs["y"] = this.yInput = new InputPort("y", PortType.PT_NUMBER);
		
        this.outputs["octant"] = this.octantOutput = new OutputPort("octant", PortType.PT_NUMBER);
		
        
        this.params["dim"] = this.dim = new Param("dim", 0);
		
        this.createNode();
    }
     
    public xInput : InputPort;
	public yInput : InputPort;
	
    public octantOutput : OutputPort;
	
    
    public dim : Param;
	
}

export class DMXDimmerProcNode extends ProcNodeBase {
    protected nodeName: string = "DMXDimmer";

    constructor() { 
        super();
        this.inputs["trigger"] = this.triggerInput = new InputPort("trigger", PortType.PT_BOOL);
		
        this.outputs["dimmer"] = this.dimmerOutput = new OutputPort("dimmer", PortType.PT_NUMBER);
		
        
        this.params["dim"] = this.dim = new Param("dim", 1);
		
        this.createNode();
    }
     
    public triggerInput : InputPort;
	
    public dimmerOutput : OutputPort;
	
    
    public dim : Param;
	
}

export class EasingProcNode extends ProcNodeBase {
    protected nodeName: string = "Easing";

    constructor() { 
        super();
        this.inputs["in"] = this.inInput = new InputPort("in", PortType.PT_NUMBER);
		
        this.outputs["out"] = this.outOutput = new OutputPort("out", PortType.PT_NUMBER);
		
        
        this.params["selectedEasing"] = this.selectedEasing = new Param("selectedEasing", 0);
		this.params["value"] = this.value = new Param("value", 0);
		
        this.createNode();
    }
     
    public inInput : InputPort;
	
    public outOutput : OutputPort;
	
    
    public selectedEasing : Param;
	public value : Param;
	
}

export class FaceDetectionProcNode extends ProcNodeBase {
    protected nodeName: string = "FaceDetection";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        this.outputs["biggest face image"] = this.biggestFaceImageOutput = new OutputPort("biggest face image", PortType.PT_IMAGE);
		this.outputs["face is available"] = this.faceIsAvailableOutput = new OutputPort("face is available", PortType.PT_BOOL);
		
        
        this.params["faceAvailHeightThreshold"] = this.faceAvailHeightThreshold = new Param("faceAvailHeightThreshold", 300);
		this.params["resizeScale"] = this.resizeScale = new Param("resizeScale", 0.30000001192092896);
		
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    public biggestFaceImageOutput : OutputPort;
	public faceIsAvailableOutput : OutputPort;
	
    
    public faceAvailHeightThreshold : Param;
	public resizeScale : Param;
	
}

export class FaceEmotionProcNode extends ProcNodeBase {
    protected nodeName: string = "FaceEmotion";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        this.outputs["pass-through image"] = this.passthroughImageOutput = new OutputPort("pass-through image", PortType.PT_IMAGE);
		this.outputs["emotion"] = this.emotionOutput = new OutputPort("emotion", PortType.PT_FEATURE);
		
        
        
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    public passthroughImageOutput : OutputPort;
	public emotionOutput : OutputPort;
	
    
    
}

export class FlowDetectionProcNode extends ProcNodeBase {
    protected nodeName: string = "FlowDetection";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        this.outputs["movement value"] = this.movementValueOutput = new OutputPort("movement value", PortType.PT_NUMBER);
		this.outputs["flow image"] = this.flowImageOutput = new OutputPort("flow image", PortType.PT_IMAGE);
		this.outputs["visualized flow"] = this.visualizedFlowOutput = new OutputPort("visualized flow", PortType.PT_IMAGE);
		
        
        this.params["resizeScale"] = this.resizeScale = new Param("resizeScale", 0.30000001192092896);
		this.params["visualize"] = this.visualize = new Param("visualize", false);
		
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    public movementValueOutput : OutputPort;
	public flowImageOutput : OutputPort;
	public visualizedFlowOutput : OutputPort;
	
    
    public resizeScale : Param;
	public visualize : Param;
	
}

export class HandProcNode extends ProcNodeBase {
    protected nodeName: string = "Hand";

    constructor() { 
        super();
        this.inputs["Skeleton"] = this.SkeletonInput = new InputPort("Skeleton", PortType.PT_BODY);
		
        this.outputs["is left closed"] = this.isLeftClosedOutput = new OutputPort("is left closed", PortType.PT_BOOL);
		this.outputs["is left opened"] = this.isLeftOpenedOutput = new OutputPort("is left opened", PortType.PT_BOOL);
		this.outputs["is right closed"] = this.isRightClosedOutput = new OutputPort("is right closed", PortType.PT_BOOL);
		this.outputs["is right opened"] = this.isRightOpenedOutput = new OutputPort("is right opened", PortType.PT_BOOL);
		
        
        
        this.createNode();
    }
     
    public SkeletonInput : InputPort;
	
    public isLeftClosedOutput : OutputPort;
	public isLeftOpenedOutput : OutputPort;
	public isRightClosedOutput : OutputPort;
	public isRightOpenedOutput : OutputPort;
	
    
    
}

export class HeadProcNode extends ProcNodeBase {
    protected nodeName: string = "Head";

    constructor() { 
        super();
        this.inputs["Skeleton"] = this.SkeletonInput = new InputPort("Skeleton", PortType.PT_BODY);
		
        this.outputs["direction"] = this.directionOutput = new OutputPort("direction", PortType.PT_VEC3);
		
        
        
        this.createNode();
    }
     
    public SkeletonInput : InputPort;
	
    public directionOutput : OutputPort;
	
    
    
}

export class IfProcNode extends ProcNodeBase {
    protected nodeName: string = "If";

    constructor() { 
        super();
        this.inputs["number"] = this.numberInput = new InputPort("number", PortType.PT_NUMBER);
		this.inputs["text"] = this.textInput = new InputPort("text", PortType.PT_TEXT);
		this.inputs["feature"] = this.featureInput = new InputPort("feature", PortType.PT_FEATURE);
		this.inputs["feature list"] = this.featureListInput = new InputPort("feature list", PortType.PT_FEATURELIST);
		this.inputs["vec3"] = this.vec3Input = new InputPort("vec3", PortType.PT_VEC3);
		
        this.outputs["result"] = this.resultOutput = new OutputPort("result", PortType.PT_BOOL);
		this.outputs["result negated"] = this.resultNegatedOutput = new OutputPort("result negated", PortType.PT_BOOL);
		
        
        this.params["compareOptionSelection"] = this.compareOptionSelection = new Param("compareOptionSelection", 1);
		this.params["compareText"] = this.compareText = new Param("compareText", "text");
		this.params["compareValue"] = this.compareValue = new Param("compareValue", 0);
		this.params["not"] = this.not = new Param("not", false);
		this.params["pos_x"] = this.pos_x = new Param("pos_x", 0);
		this.params["pos_y"] = this.pos_y = new Param("pos_y", 0);
		this.params["pos_z"] = this.pos_z = new Param("pos_z", 0);
		this.params["radius"] = this.radius = new Param("radius", 0.10000000149011612);
		
        this.createNode();
    }
     
    public numberInput : InputPort;
	public textInput : InputPort;
	public featureInput : InputPort;
	public featureListInput : InputPort;
	public vec3Input : InputPort;
	
    public resultOutput : OutputPort;
	public resultNegatedOutput : OutputPort;
	
    
    public compareOptionSelection : Param;
	public compareText : Param;
	public compareValue : Param;
	public not : Param;
	public pos_x : Param;
	public pos_y : Param;
	public pos_z : Param;
	public radius : Param;
	
}

export class ImageEnhancerProcNode extends ProcNodeBase {
    protected nodeName: string = "ImageEnhancer";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        this.outputs["enhanced image"] = this.enhancedImageOutput = new OutputPort("enhanced image", PortType.PT_IMAGE);
		
        
        this.params["adaptiveLuminance"] = this.adaptiveLuminance = new Param("adaptiveLuminance", true);
		this.params["blur"] = this.blur = new Param("blur", false);
		this.params["blurKernelSize"] = this.blurKernelSize = new Param("blurKernelSize", 50);
		this.params["claheClip"] = this.claheClip = new Param("claheClip", 4);
		this.params["cropB"] = this.cropB = new Param("cropB", 1);
		this.params["cropL"] = this.cropL = new Param("cropL", 0);
		this.params["cropR"] = this.cropR = new Param("cropR", 1);
		this.params["cropT"] = this.cropT = new Param("cropT", 0);
		this.params["equalize"] = this.equalize = new Param("equalize", false);
		this.params["horizontalFlip"] = this.horizontalFlip = new Param("horizontalFlip", false);
		this.params["invert"] = this.invert = new Param("invert", false);
		this.params["resize"] = this.resize = new Param("resize", 0.800000011920929);
		this.params["tiltLeft"] = this.tiltLeft = new Param("tiltLeft", false);
		this.params["tiltRight"] = this.tiltRight = new Param("tiltRight", false);
		this.params["toGrayScale"] = this.toGrayScale = new Param("toGrayScale", false);
		this.params["verticalFlip"] = this.verticalFlip = new Param("verticalFlip", false);
		
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    public enhancedImageOutput : OutputPort;
	
    
    public adaptiveLuminance : Param;
	public blur : Param;
	public blurKernelSize : Param;
	public claheClip : Param;
	public cropB : Param;
	public cropL : Param;
	public cropR : Param;
	public cropT : Param;
	public equalize : Param;
	public horizontalFlip : Param;
	public invert : Param;
	public resize : Param;
	public tiltLeft : Param;
	public tiltRight : Param;
	public toGrayScale : Param;
	public verticalFlip : Param;
	
}

export class ImageManipulationProcNodeProcNode extends ProcNodeBase {
    protected nodeName: string = "ImageManipulationProcNode";

    constructor() { 
        super();
        this.inputs["RGB"] = this.RGBInput = new InputPort("RGB", PortType.PT_IMAGE);
		this.inputs["Depth"] = this.DepthInput = new InputPort("Depth", PortType.PT_IMAGE);
		
        this.outputs["RGB"] = this.RGBOutput = new OutputPort("RGB", PortType.PT_IMAGE);
		this.outputs["Depth"] = this.DepthOutput = new OutputPort("Depth", PortType.PT_IMAGE);
		
        
        this.params["show"] = this.show = new Param("show", false);
		
        this.createNode();
    }
     
    public RGBInput : InputPort;
	public DepthInput : InputPort;
	
    public RGBOutput : OutputPort;
	public DepthOutput : OutputPort;
	
    
    public show : Param;
	
}

export class JsonMsgProcNode extends ProcNodeBase {
    protected nodeName: string = "JsonMsg";

    constructor() { 
        super();
        this.inputs["number"] = this.numberInput = new InputPort("number", PortType.PT_NUMBER);
		this.inputs["bool"] = this.boolInput = new InputPort("bool", PortType.PT_BOOL);
		this.inputs["text"] = this.textInput = new InputPort("text", PortType.PT_TEXT);
		this.inputs["vec2"] = this.vec2Input = new InputPort("vec2", PortType.PT_VEC2);
		this.inputs["vec3"] = this.vec3Input = new InputPort("vec3", PortType.PT_VEC3);
		this.inputs["quat"] = this.quatInput = new InputPort("quat", PortType.PT_QUAT);
		this.inputs["color"] = this.colorInput = new InputPort("color", PortType.PT_COLOR);
		this.inputs["labeled number"] = this.labeledNumberInput = new InputPort("labeled number", PortType.PT_FEATURE);
		this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		this.inputs["metamodal"] = this.metamodalInput = new InputPort("metamodal", PortType.PT_METAMODEL);
		this.inputs["bodies"] = this.bodiesInput = new InputPort("bodies", PortType.PT_BODYLIST);
		this.inputs["body"] = this.bodyInput = new InputPort("body", PortType.PT_BODY);
		this.inputs["pointcloud"] = this.pointcloudInput = new InputPort("pointcloud", PortType.PT_POINTCLOUD);
		this.inputs["audio buffer"] = this.audioBufferInput = new InputPort("audio buffer", PortType.PT_AUDIO);
		this.inputs["json"] = this.jsonInput = new InputPort("json", PortType.PT_JSON);
		
        this.outputs["json"] = this.jsonOutput = new OutputPort("json", PortType.PT_JSON);
		
        
        this.params["msgname"] = this.msgname = new Param("msgname", "value");
		
        this.createNode();
    }
     
    public numberInput : InputPort;
	public boolInput : InputPort;
	public textInput : InputPort;
	public vec2Input : InputPort;
	public vec3Input : InputPort;
	public quatInput : InputPort;
	public colorInput : InputPort;
	public labeledNumberInput : InputPort;
	public imageInput : InputPort;
	public metamodalInput : InputPort;
	public bodiesInput : InputPort;
	public bodyInput : InputPort;
	public pointcloudInput : InputPort;
	public audioBufferInput : InputPort;
	public jsonInput : InputPort;
	
    public jsonOutput : OutputPort;
	
    
    public msgname : Param;
	
}

export class KeyInProcNode extends ProcNodeBase {
    protected nodeName: string = "KeyIn";

    constructor() { 
        super();
        
        this.outputs["is pressed"] = this.isPressedOutput = new OutputPort("is pressed", PortType.PT_BOOL);
		
        
        this.params["key"] = this.key = new Param("key", 524);
		
        this.createNode();
    }
     
    
    public isPressedOutput : OutputPort;
	
    
    public key : Param;
	
}

export class KinectProcNode extends ProcNodeBase {
    protected nodeName: string = "Kinect";

    constructor() { 
        super();
        
        this.outputs["RGB"] = this.RGBOutput = new OutputPort("RGB", PortType.PT_IMAGE);
		this.outputs["Depth"] = this.DepthOutput = new OutputPort("Depth", PortType.PT_IMAGE);
		this.outputs["raw Depth"] = this.rawDepthOutput = new OutputPort("raw Depth", PortType.PT_IMAGE);
		this.outputs["filled Depth"] = this.filledDepthOutput = new OutputPort("filled Depth", PortType.PT_IMAGE);
		this.outputs["visualized Depth"] = this.visualizedDepthOutput = new OutputPort("visualized Depth", PortType.PT_IMAGE);
		this.outputs["IR"] = this.IROutput = new OutputPort("IR", PortType.PT_IMAGE);
		this.outputs["BodyIndexMap"] = this.BodyIndexMapOutput = new OutputPort("BodyIndexMap", PortType.PT_IMAGE);
		this.outputs["visualized BodyIndexMap"] = this.visualizedBodyIndexMapOutput = new OutputPort("visualized BodyIndexMap", PortType.PT_IMAGE);
		this.outputs["Bodies"] = this.BodiesOutput = new OutputPort("Bodies", PortType.PT_BODYLIST);
		this.outputs["FOV"] = this.FOVOutput = new OutputPort("FOV", PortType.PT_VEC2);
		
        
        this.params["selectedDevice"] = this.selectedDevice = new Param("selectedDevice", "");
		this.params["showJoints"] = this.showJoints = new Param("showJoints", false);
		
        this.createNode();
    }
     
    
    public RGBOutput : OutputPort;
	public DepthOutput : OutputPort;
	public rawDepthOutput : OutputPort;
	public filledDepthOutput : OutputPort;
	public visualizedDepthOutput : OutputPort;
	public IROutput : OutputPort;
	public BodyIndexMapOutput : OutputPort;
	public visualizedBodyIndexMapOutput : OutputPort;
	public BodiesOutput : OutputPort;
	public FOVOutput : OutputPort;
	
    
    public selectedDevice : Param;
	public showJoints : Param;
	
}

export class LinkerProcNode extends ProcNodeBase {
    protected nodeName: string = "Linker";

    constructor() { 
        super();
        this.inputs["Generic Input"] = this.GenericInputInput = new InputPort("Generic Input", PortType.PT_GENERIC);
		
        this.outputs["Generic Output"] = this.GenericOutputOutput = new OutputPort("Generic Output", PortType.PT_GENERIC);
		
        
        this.params["isInput"] = this.isInput = new Param("isInput", 1);
		
        this.createNode();
    }
     
    public GenericInputInput : InputPort;
	
    public GenericOutputOutput : OutputPort;
	
    
    public isInput : Param;
	
}

export class LowLevelFeaturesProcNode extends ProcNodeBase {
    protected nodeName: string = "LowLevelFeatures";

    constructor() { 
        super();
        this.inputs["spectrumIn"] = this.spectrumInInput = new InputPort("spectrumIn", PortType.PT_NUMBERLIST);
		this.inputs["rmsIn"] = this.rmsInInput = new InputPort("rmsIn", PortType.PT_NUMBER);
		
        this.outputs["lowEnergyOut"] = this.lowEnergyOutOutput = new OutputPort("lowEnergyOut", PortType.PT_NUMBER);
		this.outputs["centroidOut"] = this.centroidOutOutput = new OutputPort("centroidOut", PortType.PT_NUMBER);
		
        
        
        this.createNode();
    }
     
    public spectrumInInput : InputPort;
	public rmsInInput : InputPort;
	
    public lowEnergyOutOutput : OutputPort;
	public centroidOutOutput : OutputPort;
	
    
    
}

export class MarkerProcNode extends ProcNodeBase {
    protected nodeName: string = "Marker";

    constructor() { 
        super();
        
        this.outputs["markerPosOut"] = this.markerPosOutOutput = new OutputPort("markerPosOut", PortType.PT_VEC3);
		
        
        this.params["selectedDevice"] = this.selectedDevice = new Param("selectedDevice", 0);
		
        this.createNode();
    }
     
    
    public markerPosOutOutput : OutputPort;
	
    
    public selectedDevice : Param;
	
}

export class MarkerDetectionProcNode extends ProcNodeBase {
    protected nodeName: string = "MarkerDetection";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        this.outputs["marker image"] = this.markerImageOutput = new OutputPort("marker image", PortType.PT_IMAGE);
		this.outputs["thresholded image"] = this.thresholdedImageOutput = new OutputPort("thresholded image", PortType.PT_IMAGE);
		this.outputs["marker id"] = this.markerIdOutput = new OutputPort("marker id", PortType.PT_NUMBER);
		
        
        this.params["approximation"] = this.approximation = new Param("approximation", 20);
		this.params["distanceThreshold"] = this.distanceThreshold = new Param("distanceThreshold", 4);
		this.params["max"] = this.max = new Param("max", 4);
		this.params["min"] = this.min = new Param("min", 4);
		this.params["resizeScale"] = this.resizeScale = new Param("resizeScale", 0.5);
		
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    public markerImageOutput : OutputPort;
	public thresholdedImageOutput : OutputPort;
	public markerIdOutput : OutputPort;
	
    
    public approximation : Param;
	public distanceThreshold : Param;
	public max : Param;
	public min : Param;
	public resizeScale : Param;
	
}

export class MicrophoneProcNode extends ProcNodeBase {
    protected nodeName: string = "Microphone";

    constructor() { 
        super();
        
        this.outputs["inputNode"] = this.inputNodeOutput = new OutputPort("inputNode", PortType.PT_AUDIONODE);
		
        
        this.params["selectedMicUID"] = this.selectedMicUID = new Param("selectedMicUID", "");
		
        this.createNode();
    }
     
    
    public inputNodeOutput : OutputPort;
	
    
    public selectedMicUID : Param;
	
}

export class MonitorProcNode extends ProcNodeBase {
    protected nodeName: string = "Monitor";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        this.outputs["pass-through image"] = this.passthroughImageOutput = new OutputPort("pass-through image", PortType.PT_IMAGE);
		
        
        this.params["display"] = this.display = new Param("display", false);
		this.params["show"] = this.show = new Param("show", true);
		
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    public passthroughImageOutput : OutputPort;
	
    
    public display : Param;
	public show : Param;
	
}

export class MovementDetectionProcNode extends ProcNodeBase {
    protected nodeName: string = "MovementDetection";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        this.outputs["movement value"] = this.movementValueOutput = new OutputPort("movement value", PortType.PT_NUMBER);
		this.outputs["visualized difference"] = this.visualizedDifferenceOutput = new OutputPort("visualized difference", PortType.PT_IMAGE);
		this.outputs["movement over threshold"] = this.movementOverThresholdOutput = new OutputPort("movement over threshold", PortType.PT_BOOL);
		
        
        this.params["movementThreshold"] = this.movementThreshold = new Param("movementThreshold", 0);
		this.params["resizeScale"] = this.resizeScale = new Param("resizeScale", 0.30000001192092896);
		this.params["useMOG2"] = this.useMOG2 = new Param("useMOG2", true);
		this.params["visualize"] = this.visualize = new Param("visualize", false);
		
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    public movementValueOutput : OutputPort;
	public visualizedDifferenceOutput : OutputPort;
	public movementOverThresholdOutput : OutputPort;
	
    
    public movementThreshold : Param;
	public resizeScale : Param;
	public useMOG2 : Param;
	public visualize : Param;
	
}

export class MovingHeadProcNode extends ProcNodeBase {
    protected nodeName: string = "MovingHead";

    constructor() { 
        super();
        this.inputs["dimmer"] = this.dimmerInput = new InputPort("dimmer", PortType.PT_NUMBER);
		this.inputs["color"] = this.colorInput = new InputPort("color", PortType.PT_COLOR);
		this.inputs["isLookingAt"] = this.isLookingAtInput = new InputPort("isLookingAt", PortType.PT_BOOL);
		this.inputs["lookAt"] = this.lookAtInput = new InputPort("lookAt", PortType.PT_VEC3);
		this.inputs["lookInDirection"] = this.lookInDirectionInput = new InputPort("lookInDirection", PortType.PT_VEC3);
		
        
        
        this.params["dimmer"] = this.dimmer = new Param("dimmer", 1);
		this.params["isLookingAt"] = this.isLookingAt = new Param("isLookingAt", false);
		this.params["isUpSideDown"] = this.isUpSideDown = new Param("isUpSideDown", true);
		this.params["selectedMovingHead"] = this.selectedMovingHead = new Param("selectedMovingHead", 1115684864);
		this.params["zoom"] = this.zoom = new Param("zoom", 0);
		
        this.createNode();
    }
     
    public dimmerInput : InputPort;
	public colorInput : InputPort;
	public isLookingAtInput : InputPort;
	public lookAtInput : InputPort;
	public lookInDirectionInput : InputPort;
	
    
    
    public dimmer : Param;
	public isLookingAt : Param;
	public isUpSideDown : Param;
	public selectedMovingHead : Param;
	public zoom : Param;
	
}

export class MovingPatternProcNode extends ProcNodeBase {
    protected nodeName: string = "MovingPattern";

    constructor() { 
        super();
        this.inputs["LightArrangementIn"] = this.LightArrangementInInput = new InputPort("LightArrangementIn", PortType.PT_NUMBER);
		
        this.outputs["MovingPatternOut"] = this.MovingPatternOutOutput = new OutputPort("MovingPatternOut", PortType.PT_VEC3LIST);
		
        
        
        this.createNode();
    }
     
    public LightArrangementInInput : InputPort;
	
    public MovingPatternOutOutput : OutputPort;
	
    
    
}

export class MultiBodyPositionsProcNode extends ProcNodeBase {
    protected nodeName: string = "MultiBodyPositions";

    constructor() { 
        super();
        this.inputs["Bodies"] = this.BodiesInput = new InputPort("Bodies", PortType.PT_BODYLIST);
		
        this.outputs["Position 1"] = this.Position1Output = new OutputPort("Position 1", PortType.PT_VEC3);
		this.outputs["Number 1"] = this.Number1Output = new OutputPort("Number 1", PortType.PT_NUMBER);
		this.outputs["Position 2"] = this.Position2Output = new OutputPort("Position 2", PortType.PT_VEC3);
		this.outputs["Number 2"] = this.Number2Output = new OutputPort("Number 2", PortType.PT_NUMBER);
		this.outputs["Position 3"] = this.Position3Output = new OutputPort("Position 3", PortType.PT_VEC3);
		this.outputs["Number 3"] = this.Number3Output = new OutputPort("Number 3", PortType.PT_NUMBER);
		this.outputs["Position 4"] = this.Position4Output = new OutputPort("Position 4", PortType.PT_VEC3);
		this.outputs["Number 4"] = this.Number4Output = new OutputPort("Number 4", PortType.PT_NUMBER);
		
        
        this.params["selectedJoint"] = this.selectedJoint = new Param("selectedJoint", 0);
		
        this.createNode();
    }
     
    public BodiesInput : InputPort;
	
    public Position1Output : OutputPort;
	public Number1Output : OutputPort;
	public Position2Output : OutputPort;
	public Number2Output : OutputPort;
	public Position3Output : OutputPort;
	public Number3Output : OutputPort;
	public Position4Output : OutputPort;
	public Number4Output : OutputPort;
	
    
    public selectedJoint : Param;
	
}

export class NetworkProcNode extends ProcNodeBase {
    protected nodeName: string = "Network";

    constructor() { 
        super();
        this.inputs["json"] = this.jsonInput = new InputPort("json", PortType.PT_JSON);
		
        
        
        
        this.createNode();
    }
     
    public jsonInput : InputPort;
	
    
    
    
}

export class NoiseProcNode extends ProcNodeBase {
    protected nodeName: string = "Noise";

    constructor() { 
        super();
        this.inputs["min"] = this.minInput = new InputPort("min", PortType.PT_NUMBER);
		this.inputs["max"] = this.maxInput = new InputPort("max", PortType.PT_NUMBER);
		this.inputs["speed"] = this.speedInput = new InputPort("speed", PortType.PT_NUMBER);
		
        this.outputs["noise"] = this.noiseOutput = new OutputPort("noise", PortType.PT_NUMBER);
		
        
        this.params["dim"] = this.dim = new Param("dim", 0);
		
        this.createNode();
    }
     
    public minInput : InputPort;
	public maxInput : InputPort;
	public speedInput : InputPort;
	
    public noiseOutput : OutputPort;
	
    
    public dim : Param;
	
}

export class NumberEnhancerProcNode extends ProcNodeBase {
    protected nodeName: string = "NumberEnhancer";

    constructor() { 
        super();
        this.inputs["number"] = this.numberInput = new InputPort("number", PortType.PT_NUMBER);
		
        this.outputs["enhanced number"] = this.enhancedNumberOutput = new OutputPort("enhanced number", PortType.PT_NUMBER);
		
        
        this.params["currentMax"] = this.currentMax = new Param("currentMax", 1);
		this.params["currentMin"] = this.currentMin = new Param("currentMin", 0);
		this.params["doGate"] = this.doGate = new Param("doGate", true);
		this.params["doMap"] = this.doMap = new Param("doMap", false);
		this.params["historySize"] = this.historySize = new Param("historySize", 1);
		this.params["mappedMax"] = this.mappedMax = new Param("mappedMax", 1);
		this.params["mappedMin"] = this.mappedMin = new Param("mappedMin", 0);
		
        this.createNode();
    }
     
    public numberInput : InputPort;
	
    public enhancedNumberOutput : OutputPort;
	
    
    public currentMax : Param;
	public currentMin : Param;
	public doGate : Param;
	public doMap : Param;
	public historySize : Param;
	public mappedMax : Param;
	public mappedMin : Param;
	
}

export class OSCMsgProcNode extends ProcNodeBase {
    protected nodeName: string = "OSCMsg";

    constructor() { 
        super();
        this.inputs["number"] = this.numberInput = new InputPort("number", PortType.PT_NUMBER);
		this.inputs["bool"] = this.boolInput = new InputPort("bool", PortType.PT_BOOL);
		this.inputs["text"] = this.textInput = new InputPort("text", PortType.PT_TEXT);
		this.inputs["vec2"] = this.vec2Input = new InputPort("vec2", PortType.PT_VEC2);
		this.inputs["vec3"] = this.vec3Input = new InputPort("vec3", PortType.PT_VEC3);
		this.inputs["quat"] = this.quatInput = new InputPort("quat", PortType.PT_QUAT);
		this.inputs["color"] = this.colorInput = new InputPort("color", PortType.PT_COLOR);
		this.inputs["labeled number"] = this.labeledNumberInput = new InputPort("labeled number", PortType.PT_FEATURE);
		this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		this.inputs["json"] = this.jsonInput = new InputPort("json", PortType.PT_JSON);
		
        this.outputs["osc"] = this.oscOutput = new OutputPort("osc", PortType.PT_OSC);
		
        
        this.params["msgname"] = this.msgname = new Param("msgname", "/value");
		
        this.createNode();
    }
     
    public numberInput : InputPort;
	public boolInput : InputPort;
	public textInput : InputPort;
	public vec2Input : InputPort;
	public vec3Input : InputPort;
	public quatInput : InputPort;
	public colorInput : InputPort;
	public labeledNumberInput : InputPort;
	public imageInput : InputPort;
	public jsonInput : InputPort;
	
    public oscOutput : OutputPort;
	
    
    public msgname : Param;
	
}

export class OSCSenderProcNode extends ProcNodeBase {
    protected nodeName: string = "OSCSender";

    constructor() { 
        super();
        this.inputs["osc"] = this.oscInput = new InputPort("osc", PortType.PT_OSC);
		
        
        
        this.params["isRunning"] = this.isRunning = new Param("isRunning", false);
		this.params["port"] = this.port = new Param("port", 9001);
		
        this.createNode();
    }
     
    public oscInput : InputPort;
	
    
    
    public isRunning : Param;
	public port : Param;
	
}

export class ObjectDetectionProcNode extends ProcNodeBase {
    protected nodeName: string = "ObjectDetection";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        this.outputs["pass-through image"] = this.passthroughImageOutput = new OutputPort("pass-through image", PortType.PT_IMAGE);
		this.outputs["detection image"] = this.detectionImageOutput = new OutputPort("detection image", PortType.PT_IMAGE);
		this.outputs["feature list"] = this.featureListOutput = new OutputPort("feature list", PortType.PT_FEATURELIST);
		
        
        
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    public passthroughImageOutput : OutputPort;
	public detectionImageOutput : OutputPort;
	public featureListOutput : OutputPort;
	
    
    
}

export class PathMovementProcNode extends ProcNodeBase {
    protected nodeName: string = "PathMovement";

    constructor() { 
        super();
        this.inputs["position on path"] = this.positionOnPathInput = new InputPort("position on path", PortType.PT_NUMBER);
		
        this.outputs["position"] = this.positionOutput = new OutputPort("position", PortType.PT_VEC3);
		
        
        this.params["x"] = this.x = new Param("x", 0);
		this.params["y"] = this.y = new Param("y", 0);
		this.params["z"] = this.z = new Param("z", 0);
		
        this.createNode();
    }
     
    public positionOnPathInput : InputPort;
	
    public positionOutput : OutputPort;
	
    
    public x : Param;
	public y : Param;
	public z : Param;
	
}

export class PointcloudProcNode extends ProcNodeBase {
    protected nodeName: string = "Pointcloud";

    constructor() { 
        super();
        this.inputs["colorImage"] = this.colorImageInput = new InputPort("colorImage", PortType.PT_IMAGE);
		this.inputs["depthImage"] = this.depthImageInput = new InputPort("depthImage", PortType.PT_IMAGE);
		this.inputs["FOV"] = this.FOVInput = new InputPort("FOV", PortType.PT_VEC2);
		
        this.outputs["pointcloud"] = this.pointcloudOutput = new OutputPort("pointcloud", PortType.PT_POINTCLOUD);
		
        
        this.params["scanWholeRoom"] = this.scanWholeRoom = new Param("scanWholeRoom", true);
		this.params["threshold"] = this.threshold = new Param("threshold", 50);
		this.params["voxelSize"] = this.voxelSize = new Param("voxelSize", 0.3499999940395355);
		
        this.createNode();
    }
     
    public colorImageInput : InputPort;
	public depthImageInput : InputPort;
	public FOVInput : InputPort;
	
    public pointcloudOutput : OutputPort;
	
    
    public scanWholeRoom : Param;
	public threshold : Param;
	public voxelSize : Param;
	
}

export class PointcloudCleanerProcNodeProcNode extends ProcNodeBase {
    protected nodeName: string = "PointcloudCleanerProcNode";

    constructor() { 
        super();
        this.inputs["pointcloud"] = this.pointcloudInput = new InputPort("pointcloud", PortType.PT_POINTCLOUD);
		
        this.outputs["pointcloud"] = this.pointcloudOutput = new OutputPort("pointcloud", PortType.PT_POINTCLOUD);
		
        
        this.params["threshold"] = this.threshold = new Param("threshold", 50);
		
        this.createNode();
    }
     
    public pointcloudInput : InputPort;
	
    public pointcloudOutput : OutputPort;
	
    
    public threshold : Param;
	
}

export class PositionProcNode extends ProcNodeBase {
    protected nodeName: string = "Position";

    constructor() { 
        super();
        this.inputs["t"] = this.tInput = new InputPort("t", PortType.PT_NUMBER);
		
        this.outputs["position"] = this.positionOutput = new OutputPort("position", PortType.PT_VEC3);
		
        
        this.params["t"] = this.t = new Param("t", 0);
		
        this.createNode();
    }
     
    public tInput : InputPort;
	
    public positionOutput : OutputPort;
	
    
    public t : Param;
	
}

export class SemanticMappingProcNode extends ProcNodeBase {
    protected nodeName: string = "SemanticMapping";

    constructor() { 
        super();
        this.inputs["movement"] = this.movementInput = new InputPort("movement", PortType.PT_NUMBER);
		
        this.outputs["color"] = this.colorOutput = new OutputPort("color", PortType.PT_COLOR);
		
        
        this.params["baseColor"] = this.baseColor = new Param("baseColor", {b:1,g:1,r:1});
		
        this.createNode();
    }
     
    public movementInput : InputPort;
	
    public colorOutput : OutputPort;
	
    
    public baseColor : Param;
	
}

export class SkeletonFilterProcNode extends ProcNodeBase {
    protected nodeName: string = "SkeletonFilter";

    constructor() { 
        super();
        this.inputs["Skeleton"] = this.SkeletonInput = new InputPort("Skeleton", PortType.PT_BODY);
		
        this.outputs["Position"] = this.PositionOutput = new OutputPort("Position", PortType.PT_VEC3);
		
        
        this.params["selectedJoint"] = this.selectedJoint = new Param("selectedJoint", 2);
		
        this.createNode();
    }
     
    public SkeletonInput : InputPort;
	
    public PositionOutput : OutputPort;
	
    
    public selectedJoint : Param;
	
}

export class SkeletonMovementProcNode extends ProcNodeBase {
    protected nodeName: string = "SkeletonMovement";

    constructor() { 
        super();
        this.inputs["Skeleton"] = this.SkeletonInput = new InputPort("Skeleton", PortType.PT_BODY);
		
        this.outputs["localMovement"] = this.localMovementOutput = new OutputPort("localMovement", PortType.PT_NUMBER);
		this.outputs["globalMovement"] = this.globalMovementOutput = new OutputPort("globalMovement", PortType.PT_NUMBER);
		
        
        
        this.createNode();
    }
     
    public SkeletonInput : InputPort;
	
    public localMovementOutput : OutputPort;
	public globalMovementOutput : OutputPort;
	
    
    
}

export class SpectrumProcNode extends ProcNodeBase {
    protected nodeName: string = "Spectrum";

    constructor() { 
        super();
        this.inputs["audioNode"] = this.audioNodeInput = new InputPort("audioNode", PortType.PT_AUDIONODE);
		
        this.outputs["spectrum"] = this.spectrumOutput = new OutputPort("spectrum", PortType.PT_NUMBERLIST);
		this.outputs["centroid"] = this.centroidOutput = new OutputPort("centroid", PortType.PT_NUMBER);
		
        
        
        this.createNode();
    }
     
    public audioNodeInput : InputPort;
	
    public spectrumOutput : OutputPort;
	public centroidOutput : OutputPort;
	
    
    
}

export class SpeedProcNode extends ProcNodeBase {
    protected nodeName: string = "Speed";

    constructor() { 
        super();
        this.inputs["position"] = this.positionInput = new InputPort("position", PortType.PT_VEC3);
		
        this.outputs["speed"] = this.speedOutput = new OutputPort("speed", PortType.PT_NUMBER);
		
        
        
        this.createNode();
    }
     
    public positionInput : InputPort;
	
    public speedOutput : OutputPort;
	
    
    
}

export class TimelineProcNode extends ProcNodeBase {
    protected nodeName: string = "Timeline";

    constructor() { 
        super();
        this.inputs["start"] = this.startInput = new InputPort("start", PortType.PT_BOOL);
		this.inputs["stop"] = this.stopInput = new InputPort("stop", PortType.PT_BOOL);
		
        this.outputs["_1"] = this._1Output = new OutputPort("_1", PortType.PT_BOOL);
		
        
        this.params["ItemNumber"] = this.ItemNumber = new Param("ItemNumber", 1);
		this.params["group0"] = this.group0 = new Param("group0", 1);
		this.params["length0"] = this.length0 = new Param("length0", 10);
		
        this.createNode();
    }
     
    public startInput : InputPort;
	public stopInput : InputPort;
	
    public _1Output : OutputPort;
	
    
    public ItemNumber : Param;
	public group0 : Param;
	public length0 : Param;
	
}

export class TriggerListProcNode extends ProcNodeBase {
    protected nodeName: string = "TriggerList";

    constructor() { 
        super();
        this.inputs["fire"] = this.fireInput = new InputPort("fire", PortType.PT_BOOL);
		this.inputs["step up"] = this.stepUpInput = new InputPort("step up", PortType.PT_BOOL);
		this.inputs["step down"] = this.stepDownInput = new InputPort("step down", PortType.PT_BOOL);
		this.inputs["reset"] = this.resetInput = new InputPort("reset", PortType.PT_BOOL);
		
        
        
        this.params["trigger"] = this.trigger = new Param("trigger", []);
		
        this.createNode();
    }
     
    public fireInput : InputPort;
	public stepUpInput : InputPort;
	public stepDownInput : InputPort;
	public resetInput : InputPort;
	
    
    
    public trigger : Param;
	
}

export class VideoRecorderProcNode extends ProcNodeBase {
    protected nodeName: string = "VideoRecorder";

    constructor() { 
        super();
        this.inputs["image"] = this.imageInput = new InputPort("image", PortType.PT_IMAGE);
		
        
        
        
        this.createNode();
    }
     
    public imageInput : InputPort;
	
    
    
    
}

export class VoxelFilterProcNodeProcNode extends ProcNodeBase {
    protected nodeName: string = "VoxelFilterProcNode";

    constructor() { 
        super();
        this.inputs["pointcloud"] = this.pointcloudInput = new InputPort("pointcloud", PortType.PT_POINTCLOUD);
		
        this.outputs["pointcloud"] = this.pointcloudOutput = new OutputPort("pointcloud", PortType.PT_POINTCLOUD);
		
        
        this.params["voxelSize"] = this.voxelSize = new Param("voxelSize", 0.3499999940395355);
		
        this.createNode();
    }
     
    public pointcloudInput : InputPort;
	
    public pointcloudOutput : OutputPort;
	
    
    public voxelSize : Param;
	
}